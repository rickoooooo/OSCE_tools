#!/usr/bin/python

# This script will take a list of badchars and then output a bunch of potentially useful opcodes that do not include these badchars

BADCHARS = "\x00"

jmp = [
["JO: OF=1", "\x70"],
["JNO: OF=0", "\x71"],
["JS: SF=1", "\x78"],
["JNS: SF=0", "\x79"],
["JE/JZ: ZF=1", "\x75"],
["JNE/JNZ: ZF=0", "\x72"],
["JB/JNAE/JC: CF=1", "\x72"],
["JNB/JAE/JNC: CF=0", "\x73"],
["JBE/JNA: CF=1 or ZF=1", "\x76"],
["JA/JNBE: CF=0 and ZF=0", "\x77"],
["JL/JNGE: SF<>OF", "\x7c"],
["JGE/JNL: SF=OF", "\x7d"],
["JLE/JNG: ZF=1 or SF<>0F", "\x7e"],
["JG/JNLE: ZF=0 and SF=0F", "\x7f"],
["JP/JPE: PF=1", "\x7a"],
["JNP/JPO: PF=0", "\x7b"],
["JCXZ/JECXZ: %ECX=0", "\xe3"]
]

call = [
["CALL rel16", "\xe8"],
["CALL rel32", "\xe8"],
["CALL r/m16", "\xff"],
["CALL r/m32", "\xff"],
["CALL ptr16:16", "\x9a"],
["CALL ptr16:32", "\x9a"],
["CALL m16:16", "\xff"],
["CALL m16:32", "\xff"]
]

push = [
["PUSH r/m16", "\xff"],
["PUSH r/m32", "\xff"],
["PUSH EAX", "\x50"],
["PUSH ECX", "\x51"],
["PUSH EDX", "\x52"],
["PUSH EBX", "\x53"],
["PUSH ESP", "\x54"],
["PUSH EBP", "\x55"],
["PUSH ESI", "\x56"],
["PUSH EDI", "\x57"],
["PUSH imm8", "\x6a"],
["PUSH imm16", "\x68"],
["PUSH CS", "\x68"],
["PUSH imm32", "\x0e"],
["PUSH SS", "\x16"],
["PUSH DS", "\x1e"],
["PUSH ES", "\x06"],
["PUSHAD", "\x60"],
["PUSHFD", "\x9c"],
]

pop = [
["POP r/m16", "\x8f"],
["POP r/m32", "\x8f"],
["POP EAX", "\x58"],
["POP ECX", "\x59"],
["POP EDX", "\x5a"],
["POP EBX", "\x5b"],
["POP ESP", "\x5c"],
["POP EBP", "\x5d"],
["POP ESI", "\x5e"],
["POP EDI", "\x5f"],
["POP DS", "\x1f"],
["POP ES", "\x07"],
["POP SS", "\x17"],
["POPAD", "\x61"],
["POPFD", "\x9d"],
]

add = [
["ADD AL, imm8", "\x04"],
["ADD AX, imm16", "\x05"],
["ADD EAX, imm32", "\x05"],
["ADD r/m8, imm8", "\x80"],
["ADD r/m16, imm16", "\x81"],
["ADD r/m16, imm8", "\x81"],
["ADD EAX, imm32", "\x83\xc0"],
["ADD ECX, imm32", "\x83\xc1"],
["ADD EDX, imm32", "\x83\xc2"],
["ADD EBX, imm32", "\x83\xc3"],
["ADD ESP, imm32", "\x83\xc4"],
["ADD EBP, imm32", "\x83\xc5"],
["ADD ESI, imm32", "\x83\xc6"],
["ADD EDI, imm32", "\x83\xc7"],
["ADD r/m16, r16", "\x00"],
["ADD r/m8, r8", "\x01"],
["ADD r/m32, r32", "\x01"],
["ADD r8, r/m8", "\x02"],
["ADD r16, r/m16", "\x03"],
["ADD r32, r/m32", "\x03"]
]

sub = [
["SUB AL,imm8", "\x2c"],
["SUB AX,imm16", "\x2d"],
["SUB EAX,imm32", "\x2d"],
["SUB r/m8,imm8", "\x80"],
["SUB r/m16,imm16", "\x81"],
["SUB r/m32,imm32", "\x81"],
["SUB EAX,imm8", "\x83\xe8"],
["SUB ECX,imm8", "\x83\xe9"],
["SUB EDX,imm8", "\x83\xea"],
["SUB EBX,imm8", "\x83\xeb"],
["SUB ESP,imm8", "\x83\xec"],
["SUB EBP,imm8", "\x83\xed"],
["SUB ESI,imm8", "\x83\xee"],
["SUB EDI,imm8", "\x83\xef"],
["SUB r/m32,imm8", "\x28"],
["SUB r/m16,r16", "\x29"],
["SUB r/m32,r32", "\x29"],
["SUB r8,r/m8", "\x2a"],
["SUB r16,r/m16", "\x2b"],
["SUB r32,r/m32", "\x2c"]
]

inc = [
["INC r/m8", "\xfe"],
["INC r/m16", "\xff"],
["INC r/m32", "\xff"],
["INC EAX", "\x40"],
["INC ECX", "\x41"],
["INC EDX", "\x42"],
["INC EBX", "\x43"],
["INC ESP", "\x44"],
["INC EBP", "\x45"],
["INC ESI", "\x46"],
["INC EDI", "\x47"],
]

dec = [
["DEC r/m8", "\xfe"],
["DEC r/m16", "\xff"],
["DEC r/m32", "\xff"],
["DEC EAX", "\x48"],
["DEC ECX", "\x49"],
["DEC EDX", "\x4a"],
["DEC EBX", "\x4b"],
["DEC ESP", "\x4c"],
["DEC EBP", "\x4d"],
["DEC ESI", "\x4e"],
["DEC EDI", "\x4f"],
]

ops = [
["XOR r32, r32", "\x31"],
["XOR r32, imm32", "\x83"],
["XOR EAX, imm32", "\x83\xf0"],
["XOR ECX, imm32", "\x83\xf1"],
["XOR EDX, imm32", "\x83\xf2"],
["XOR EBX, imm32", "\x83\xf3"],
["XOR ESP, imm32", "\x83\xf4"],
["XOR EBP, imm32", "\x83\xf5"],
["XOR ESI, imm32", "\x83\xf6"],
["XOR EDI, imm32", "\x83\xf7"],
["OR r32, r32", "\x09"],
["OR r32, imm32", "\x83"],
["OR EAX, imm32", "\x83\xc8"],
["OR ECX, imm32", "\x83\xc9"],
["OR EDX, imm32", "\x83\xca"],
["OR EBX, imm32", "\x83\xcb"],
["OR ESP, imm32", "\x83\xcc"],
["OR EBP, imm32", "\x83\xcd"],
["OR ESI, imm32", "\x83\xce"],
["OR EDI, imm32", "\x83\xcf"],
["AND r32, r32", "\x21"],
["AND EAX, imm32", "\x83\xe0"],
["AND ECX, imm32", "\x83\xe1"],
["AND EDX, imm32", "\x83\xe2"],
["AND EBX, imm32", "\x83\xe3"],
["AND ESP, imm32", "\x83\xe4"],
["AND EBP, imm32", "\x83\xe5"],
["AND ESI, imm32", "\x83\xe6"],
["AND EDI, imm32", "\x83\xe7"],
["RETN", "\xC3"],
]

def output_instructions(instructions, bad_chars):
    for inst in instructions:
        good_inst = True
        for char in bad_chars:
            if char in inst[1] :
                good_inst = False
                break
        if good_inst == True:
            print "\t" + hex(ord(inst[1])) + "\t: " + inst[0]

def main():

    print "[*] JMP instructions - http://www.unixwiz.net/techtips/x86-jumps.html"
    output_instructions(jmp, BADCHARS)

    print "[*] CALL instructions - https://c9x.me/x86/html/file_module_x86_id_26.html"
    output_instructions(call, BADCHARS)

    print "[*] PUSH instructions - https://c9x.me/x86/html/file_module_x86_id_269.html"
    output_instructions(push, BADCHARS)

    print "[*] POP instructions - https://c9x.me/x86/html/file_module_x86_id_248.html"
    output_instructions(pop, BADCHARS)

    print "[*] ADD instructions - https://c9x.me/x86/html/file_module_x86_id_5.html"
    output_instructions(add, BADCHARS)

    print "[*] SUB instructions - https://c9x.me/x86/html/file_module_x86_id_308.html"
    output_instructions(sub, BADCHARS)

    print "[*] INC instructions - https://c9x.me/x86/html/file_module_x86_id_140.html"
    output_instructions(inc, BADCHARS)

    print "[*] DEC instructions - https://c9x.me/x86/html/file_module_x86_id_71.html"
    output_instructions(dec, BADCHARS)

    print "[*] Operator instructions"
    output_instructions(ops, BADCHARS)

if __name__ == '__main__':
    main()
