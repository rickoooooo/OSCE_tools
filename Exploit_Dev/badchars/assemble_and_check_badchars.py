#!/usr/bin/python

# This script can be used to assemble some ASM instructions. Once assembled, it will check for badchars and let you know if you messed up.

from keystone import *
from colorama import Fore, Style

SHELLCODE = """
PUSH ESP;
POP EAX;
ADD EAX,0x11111111;
ADD EAX,0x22222222;
PUSH EAX;
POP ESP;
"""

BADCHARS = "\x00"


# Assemble our egg
def assemble(code):
	try:
		# Initialize engine in X86-32bit mode
		ks = Ks(KS_ARCH_X86, KS_MODE_32)
		encoding, count = ks.asm(code)
                #print("%s (number of statements: %u)" %(encoding, count))
	except KsError as e:
		print("ERROR assembling egghunter: %s" %e)
		exit()

	return encoding


def check_bad_chars(code, badchars):
    output = ""
    for c in code:
        if chr(c) in badchars:
            output += Fore.RED + "[\\x%0.2X" % ord(chr(c)) + "] " + Style.RESET_ALL
        else:
            output += "\\x%0.2X" % ord(chr(c)) + " "

    return output


def main():
    print "[*] Assembling shellcode..."
    print SHELLCODE
    encoding = assemble(SHELLCODE)

    print "[*] Checking for bad chars..."
    output = check_bad_chars(encoding, BADCHARS)

    print output


if __name__ == '__main__':
	main()
