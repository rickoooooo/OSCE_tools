#!/usr/bin/python

# Sometimes we run into a lot of bad chars and you need a way to get a certain hex value onto the stack.
# Usually you can do this by adding two values like if 0x00 is a bad char and you need 0x00000000 on the stack,
# You could subtract 0x11111111 - 0x11111111 and end up with 0x00000000. This script attempts to automatically
# come up with some values to generate a provided hex value.

import sys

BAD_CHARS = "\x00"


def main():
    end_hex = sys.argv[1]
    #bad_chars = sys.argv[2]
    bad_chars = BAD_CHARS

    value = int(end_hex, 16)
    print "[*] Calculating new values for " + end_hex

    value_bytes = []
    num1_bytes = [0,0,0,0]
    num2_bytes = [0,0,0,0]

    # Break hex value into separate bytes
    num_hex = format(value, '08x')
    value_bytes.append(chr(int(num_hex[:2], 16)))
    value_bytes.append(chr(int(num_hex[2:4], 16)))
    value_bytes.append(chr(int(num_hex[4:6], 16)))
    value_bytes.append(chr(int(num_hex[6:8], 16)))

    for counter in range(3, -1, -1):
        #print "DEBUG: Counter: " + str(counter)
        hex_byte = value_bytes[counter]
        rollover = False
        for i in range(0,255):
            if chr(i) not in bad_chars:
                i2 = ord(hex_byte) + i
                if num2_bytes[counter] + i2 > 255:
                    i2 = i2 - 256
                    rollover = True
                if chr(num2_bytes[counter] + i2) not in bad_chars:
                    num1_bytes[counter] = i
                    num2_bytes[counter] = num2_bytes[counter] + i2
                    if rollover == True:
                        if counter > 0:
                            num2_bytes[counter - 1] = num2_bytes[counter - 1] + 1
                    break

    hex1 = "0x" + format(num1_bytes[0], '02x') + format(num1_bytes[1], '02x') + format(num1_bytes[2], '02x') + format(num1_bytes[3], '02x')
    hex2 = "0x" + format(num2_bytes[0], '02x') + format(num2_bytes[1], '02x') + format(num2_bytes[2], '02x') + format(num2_bytes[3], '02x')

    print "[*] Results: "
    result = int(hex2, 16) - int(hex1, 16)

    if result < 0:
        result = result + 0xffffffff + 1
    if result == value:
        print "\tSUB: " + hex2 + " - " + hex1 + " = " + end_hex

    num1_bytes = [0,0,0,0]
    num2_bytes = [0,0,0,0]

    for counter in range(3, -1, -1):
        #print "DEBUG: Counter: " + str(counter)
        hex_byte = value_bytes[counter]
        rollover = False
        for i in range(0,255):
            if chr(i) not in bad_chars:
                i2 = ord(hex_byte) - i
                #print "i2: " + str(i2)
                if i2 < 0:
                    i2 = i2 + 256
                    rollover = True
                #print "i2: " + str(i2)
                #print "num2_bytes[counter] - i2: " + str(num2_bytes[counter] - i2)
                if chr(i2) not in bad_chars:
                    #print i2
                    num1_bytes[counter] = i
                    num2_bytes[counter] = i2
                    if rollover == True:
                        if counter > 0:
                            num2_bytes[counter - 1] = 255
                    break

    hex1 = "0x" + format(num1_bytes[0], '02x') + format(num1_bytes[1], '02x') + format(num1_bytes[2], '02x') + format(num1_bytes[3], '02x')
    hex2 = "0x" + format(num2_bytes[0], '02x') + format(num2_bytes[1], '02x') + format(num2_bytes[2], '02x') + format(num2_bytes[3], '02x')
    if int(hex2, 16) + int(hex1, 16) == value:
        print "\tADD: " + hex2 + " + " + hex1 + " = " + end_hex

if __name__ == '__main__':
	main()
